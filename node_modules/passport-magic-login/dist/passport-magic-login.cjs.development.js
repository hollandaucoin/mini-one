'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var jwt = _interopDefault(require('jsonwebtoken'));

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

var decodeToken = function decodeToken(secret, token) {
  if (typeof token !== 'string') throw new Error('No token provided');
  return jwt.verify(token, secret);
};
var generateToken = function generateToken(secret, payload, options) {
  if (options === void 0) {
    options = {
      expiresIn: '60min'
    };
  }

  return jwt.sign(payload, secret, options);
};

var MagicLoginStrategy = /*#__PURE__*/function () {
  function MagicLoginStrategy(_options) {
    var _this = this;

    this._options = _options;
    this.name = 'magiclogin';

    this.send = function (req, res) {
      var _req$headers$content;

      var payload = req.method === 'GET' ? req.query : req.body;

      if (req.method === 'POST' && !((_req$headers$content = req.headers['content-type']) != null && _req$headers$content.match('application/json'))) {
        res.status(400).send('Content-Type must be application/json when using POST method.');
        return;
      }

      if (!payload.destination) {
        res.status(400).send('Please specify the destination.');
        return;
      }

      var code = Math.floor(Math.random() * 90000) + 10000 + '';
      var jwt = generateToken(_this._options.secret, _extends({}, payload, {
        code: code
      }), _this._options.jwtOptions);

      _this._options.sendMagicLink(payload.destination, _this._options.callbackUrl + "?token=" + jwt, code, req).then(function () {
        res.json({
          success: true,
          code: code
        });
      })["catch"](function (error) {
        console.error(error);
        res.json({
          success: false,
          error: error
        });
      });
    };
    /** @deprecated */


    this.confirm = function (req, res) {
      console.warn("magicLink.confirm was removed in v1.0.7, it is no longer necessary.");
      res.redirect(_this._options.callbackUrl + "?token=" + req.query.token);
    };
  }

  var _proto = MagicLoginStrategy.prototype;

  _proto.authenticate = function authenticate(req) {
    var self = this;
    var payload = null;

    try {
      var _req$body;

      payload = decodeToken(self._options.secret, req.query.token || ((_req$body = req.body) == null ? void 0 : _req$body.token));
    } catch (error) {
      var defaultMessage = 'No valid token provided';
      var message = error instanceof Error ? error.message : defaultMessage;
      return self.fail(message);
    }

    var verifyCallback = function verifyCallback(err, user, info) {
      if (err) {
        return self.error(err);
      } else if (!user) {
        return self.fail(info);
      } else {
        return self.success(user, info);
      }
    };

    self._options.verify(payload, verifyCallback, req);
  };

  return MagicLoginStrategy;
}();

exports.default = MagicLoginStrategy;
//# sourceMappingURL=passport-magic-login.cjs.development.js.map
